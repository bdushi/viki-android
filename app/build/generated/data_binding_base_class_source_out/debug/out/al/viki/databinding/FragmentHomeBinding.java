// Generated by view binder compiler. Do not edit!
package al.viki.databinding;

import al.viki.R;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputLayout;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppCompatImageView filter;

  @NonNull
  public final LinearLayout header;

  @NonNull
  public final MaterialTextView label;

  @NonNull
  public final AppCompatImageView menu;

  @NonNull
  public final AppCompatSpinner operationFilter;

  @NonNull
  public final RecyclerView property;

  @NonNull
  public final SwipeRefreshLayout refreshProperty;

  @NonNull
  public final EditText search;

  @NonNull
  public final TextInputLayout searchInputLayout;

  private FragmentHomeBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppCompatImageView filter, @NonNull LinearLayout header,
      @NonNull MaterialTextView label, @NonNull AppCompatImageView menu,
      @NonNull AppCompatSpinner operationFilter, @NonNull RecyclerView property,
      @NonNull SwipeRefreshLayout refreshProperty, @NonNull EditText search,
      @NonNull TextInputLayout searchInputLayout) {
    this.rootView = rootView;
    this.filter = filter;
    this.header = header;
    this.label = label;
    this.menu = menu;
    this.operationFilter = operationFilter;
    this.property = property;
    this.refreshProperty = refreshProperty;
    this.search = search;
    this.searchInputLayout = searchInputLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.filter;
      AppCompatImageView filter = ViewBindings.findChildViewById(rootView, id);
      if (filter == null) {
        break missingId;
      }

      id = R.id.header;
      LinearLayout header = ViewBindings.findChildViewById(rootView, id);
      if (header == null) {
        break missingId;
      }

      id = R.id.label;
      MaterialTextView label = ViewBindings.findChildViewById(rootView, id);
      if (label == null) {
        break missingId;
      }

      id = R.id.menu;
      AppCompatImageView menu = ViewBindings.findChildViewById(rootView, id);
      if (menu == null) {
        break missingId;
      }

      id = R.id.operation_filter;
      AppCompatSpinner operationFilter = ViewBindings.findChildViewById(rootView, id);
      if (operationFilter == null) {
        break missingId;
      }

      id = R.id.property;
      RecyclerView property = ViewBindings.findChildViewById(rootView, id);
      if (property == null) {
        break missingId;
      }

      id = R.id.refresh_property;
      SwipeRefreshLayout refreshProperty = ViewBindings.findChildViewById(rootView, id);
      if (refreshProperty == null) {
        break missingId;
      }

      id = R.id.search;
      EditText search = ViewBindings.findChildViewById(rootView, id);
      if (search == null) {
        break missingId;
      }

      id = R.id.search_input_layout;
      TextInputLayout searchInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (searchInputLayout == null) {
        break missingId;
      }

      return new FragmentHomeBinding((ConstraintLayout) rootView, filter, header, label, menu,
          operationFilter, property, refreshProperty, search, searchInputLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
