// Generated by data binding compiler. Do not edit!
package al.viki.databinding;

import al.viki.R;
import al.viki.model.PropertyUi;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ObservableBoolean;
import androidx.databinding.ViewDataBinding;
import androidx.recyclerview.widget.ListAdapter;
import androidx.viewpager2.widget.ViewPager2;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.tabs.TabLayout;
import com.google.android.material.textview.MaterialTextView;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class FragmentPropertyDetailsBinding extends ViewDataBinding {
  @NonNull
  public final MaterialTextView detailsPropertyAgent;

  @NonNull
  public final MaterialTextView detailsPropertyAgentLabel;

  @NonNull
  public final AppBarLayout detailsPropertyAppBarLayout;

  @NonNull
  public final MaterialTextView detailsPropertyDescription;

  @NonNull
  public final MaterialTextView detailsPropertyDescriptionLabel;

  @NonNull
  public final ViewPager2 detailsPropertyItem;

  @NonNull
  public final TabLayout detailsPropertyItemDotIndicator;

  @NonNull
  public final MaterialTextView detailsPropertyLocationInMapLabel;

  @NonNull
  public final MaterialTextView detailsPropertyOperation;

  @NonNull
  public final AppCompatImageView detailsPropertyPhotoError;

  @NonNull
  public final MaterialTextView detailsPropertyPrice;

  @NonNull
  public final MaterialTextView detailsPropertyPricePerUnit;

  @NonNull
  public final LinearLayout detailsPropertyRoot;

  @NonNull
  public final MaterialToolbar topAppBar;

  @Bindable
  protected ListAdapter mAdapter;

  @Bindable
  protected PropertyUi mProperty;

  @Bindable
  protected ObservableBoolean mIsNotEmpty;

  @Bindable
  protected View.OnClickListener mOnClick;

  protected FragmentPropertyDetailsBinding(Object _bindingComponent, View _root,
      int _localFieldCount, MaterialTextView detailsPropertyAgent,
      MaterialTextView detailsPropertyAgentLabel, AppBarLayout detailsPropertyAppBarLayout,
      MaterialTextView detailsPropertyDescription, MaterialTextView detailsPropertyDescriptionLabel,
      ViewPager2 detailsPropertyItem, TabLayout detailsPropertyItemDotIndicator,
      MaterialTextView detailsPropertyLocationInMapLabel, MaterialTextView detailsPropertyOperation,
      AppCompatImageView detailsPropertyPhotoError, MaterialTextView detailsPropertyPrice,
      MaterialTextView detailsPropertyPricePerUnit, LinearLayout detailsPropertyRoot,
      MaterialToolbar topAppBar) {
    super(_bindingComponent, _root, _localFieldCount);
    this.detailsPropertyAgent = detailsPropertyAgent;
    this.detailsPropertyAgentLabel = detailsPropertyAgentLabel;
    this.detailsPropertyAppBarLayout = detailsPropertyAppBarLayout;
    this.detailsPropertyDescription = detailsPropertyDescription;
    this.detailsPropertyDescriptionLabel = detailsPropertyDescriptionLabel;
    this.detailsPropertyItem = detailsPropertyItem;
    this.detailsPropertyItemDotIndicator = detailsPropertyItemDotIndicator;
    this.detailsPropertyLocationInMapLabel = detailsPropertyLocationInMapLabel;
    this.detailsPropertyOperation = detailsPropertyOperation;
    this.detailsPropertyPhotoError = detailsPropertyPhotoError;
    this.detailsPropertyPrice = detailsPropertyPrice;
    this.detailsPropertyPricePerUnit = detailsPropertyPricePerUnit;
    this.detailsPropertyRoot = detailsPropertyRoot;
    this.topAppBar = topAppBar;
  }

  public abstract void setAdapter(@Nullable ListAdapter adapter);

  @Nullable
  public ListAdapter getAdapter() {
    return mAdapter;
  }

  public abstract void setProperty(@Nullable PropertyUi property);

  @Nullable
  public PropertyUi getProperty() {
    return mProperty;
  }

  public abstract void setIsNotEmpty(@Nullable ObservableBoolean isNotEmpty);

  @Nullable
  public ObservableBoolean getIsNotEmpty() {
    return mIsNotEmpty;
  }

  public abstract void setOnClick(@Nullable View.OnClickListener onClick);

  @Nullable
  public View.OnClickListener getOnClick() {
    return mOnClick;
  }

  @NonNull
  public static FragmentPropertyDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_property_details, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static FragmentPropertyDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<FragmentPropertyDetailsBinding>inflateInternal(inflater, R.layout.fragment_property_details, root, attachToRoot, component);
  }

  @NonNull
  public static FragmentPropertyDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_property_details, null, false, component)
   */
  @NonNull
  @Deprecated
  public static FragmentPropertyDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<FragmentPropertyDetailsBinding>inflateInternal(inflater, R.layout.fragment_property_details, null, false, component);
  }

  public static FragmentPropertyDetailsBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static FragmentPropertyDetailsBinding bind(@NonNull View view,
      @Nullable Object component) {
    return (FragmentPropertyDetailsBinding)bind(component, view, R.layout.fragment_property_details);
  }
}
